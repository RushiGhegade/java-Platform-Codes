//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}

class Driverclass
{
    public static void main (String[] args) throws IOException
    {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        int t = Integer.parseInt(in.readLine().trim());
        
        while(t-- > 0)
        {
            int n =Integer.parseInt(in.readLine().trim());
            String s[] = in.readLine().trim().split(" ");
            Node head = new Node(Integer.parseInt(s[0]));
            Node tail = head;
            for (int i = 1; i < n; i++) {
                tail.next = new Node(Integer.parseInt(s[i]));
                tail = tail.next;
            }

            head = new Solution().segregate(head);
            printList(head, out);
            out.println();
        }
        out.close();
    }
    
    public static void printList(Node head,PrintWriter out)
    {
        if(head == null)
           return;
           
        Node temp = head;
        while(temp != null)
        {
            out.print(temp.data + " ");
            temp = temp.next;
        }
    }
    
    
}




// } Driver Code Ends


//User function Template for Java

/*
class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data = data;
        next = null;
    }
}
*/
class Solution
{
    //Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head)
    {
        // add your code here
        Node zero=null;
        Node one=null;
        Node two=null;
        
        Node headzero=null;
        Node headone=null;
        Node headtwo=null;
        
        
     // make a separete linkedlist for 0's 1's 2's 
       while(head!=null){
            
            if(head.data==0){
                Node newnode=new Node(0);
                if(headzero==null){
                    headzero=newnode;
                    zero=headzero;
                }else{
                    zero.next=newnode;
                    zero=newnode;
                    
                }
                
            }else if(head.data==1){
                Node newnode=new Node(1);
                if(headone==null){
                    headone=newnode;
                    one=headone;
                }else{
                    one.next=newnode;
                    one=newnode;
                    
                }
            }else{
                Node newnode=new Node(2);
                if(headtwo==null){
                    headtwo=newnode;
                    two=headtwo;
                }else{
                    two.next=newnode;
                    two=newnode;
                    
                }
            }
            head=head.next;
        }
        
        // connect the created linkedlist 0->1->2
        if(headzero!=null && headone!=null){
            zero.next=headone;
        }
        if(headzero!=null && headone==null){
            zero.next=headtwo;
        }
        
        if(headone!=null ){
            one.next=headtwo;
        }
        
        // return 
        if(headzero!=null)
            return headzero;
        else if(headone!=null)
            return headone;
        else
            return headtwo;
    }
}


