/*
2:Intersection of Two Linked Lists
Companies:
Oracle,Microsoft,Tekion-corp,Facebook,Netflix,Google,Flipkart,Adobe,Samsung,CRED,Meesho,
Swiggy,Dream1,InMobi,Oyo,PayTM
Platform : Leetcode-160, GFG
Striverâ€™s DSA sheet.
Description:
Given the heads of two singly linked-lists headA and headB, return the node at which the
two lists intersect. If the two linked lists have no intersection at all, return null.
For example, the following two linked lists begin to intersect at node c1:

The test cases are generated such that there are no cycles anywhere in the entire linked
structure.
Note that the linked lists must retain their original structure after the function returns.
Custom Judge:
The inputs to the judge are given as follows (your program is not given these inputs):
intersectVal - The value of the node where the intersection occurs. This is 0 if there is no
intersected node.
listA - The first linked list.
listB - The second linked list.
skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the
intersected node.
skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the
intersected node.
The judge will then create the linked structure based on these inputs and pass the two
heads, headA and headB to your program. If you correctly return the intersected node,
then your solution will be accepted.
Example 1:
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'

Explanation: The intersected node's value is 8 (note that this must not be 0 if the two
lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5].
There are 2 nodes before the intersected node in A; There are 3 nodes before the
intersected node in B.
- Note that the intersected node's value is not 1 because the nodes with value 1 in A and
B (2nd node in A and 3rd node in B) are different node references. In other words, they
point to two different locations in memory, while the nodes with value 8 in A and B (3rd
node in A and 4th node in B) point to the same location in memory.
Example 2:
Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two
lists intersect).
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There
are 3 nodes before the intersected node in A; There are 1 node before the intersected
node in B.
Example 3:
Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as
[1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB
can be arbitrary values.
Explanation: The two lists do not intersect, so return null.

Constraints:
The number of nodes of listA is in the m.
The number of nodes of listB is in the n.
1 <= m, n <= 3 * 104
1 <= Node.val <= 105
0 <= skipA < m
0 <= skipB < n
intersectVal is 0 if listA and listB do not intersect.
intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.
*/


// LeetCode 2Intersection of Two Linked Lists

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        ListNode All=headA;
        ListNode Bll=headB;

        HashSet hs=new HashSet();

        while(All!=null && Bll!=null) {
            
            if(All==Bll){
                return All;
            }

            if(hs.contains(All) || hs.contains(Bll)){
                if(hs.contains(All)){
                    return All;
                }else{
                    return Bll;
                }
                
            }else{
                hs.add(All);
                hs.add(Bll);
            }
            All=All.next;
            Bll=Bll.next;
        }

        while(All!=null){
            if(hs.contains(All)){
                return All;
            }else{
                hs.add(All);
            }
            All=All.next;
        }

        while(Bll!=null) {
            if( hs.contains(Bll)){
                return Bll;
            }else{
                hs.add(Bll);
            }
            Bll=Bll.next;
        }

        return null;


    }
}


// Gfg


import java.util.*;
class Node {

        int data;
        Node next;

        Node(int data) {
                this.data=data;
                this.next=null;
        }
}

class LinkedList{

        Node head=null;

        void add(int data) {

                Node newnode=new Node(data);

                if(head==null) {
                        head=newnode;
                }else{
                        Node temp=head;

                        while(temp.next!=null) {
                                temp=temp.next;
                        }
                        temp.next=newnode;
                }
        }
}

class Demo{

        static void printll(Node head){

                Node temp=head;

                while(temp!=null){
                        System.out.print(temp.data+" ");
                        temp=temp.next;
                }
        }


        public static void main(String args[]) {

                Scanner sc=new Scanner(System.in);

                LinkedList ll=new LinkedList();
                 LinkedList ll2=new LinkedList();

                int l1=39;
                int l2=15;

                for(int i=0;i<l1;i++){
                        int num=sc.nextInt();
                        ll.add(num);
                }
                System.out.println("Next");
                for(int i=0;i<l2;i++){
                        int num=sc.nextInt();
                        ll2.add(num);
                }



        Node All=ll.head;
        Node Bll=ll2.head;


        Node newhead=null;
        Node newll=null;


        HashSet hs=new HashSet();

        while(Bll!=null) {
            hs.add(Bll.data);
            Bll=Bll.next;
        }

        while(All!=null) {

            if(hs.contains(All.data)) {
                Node newnode=new Node(All.data);
                if(newhead==null){
                    newhead=newnode;
                    newll=newhead;
                }else{
                    newll.next=newnode;
                    newll=newnode;
                }
            }
            All=All.next;
        }
        //System.out.println(hs);
       //System.out.println("->");
        printll(newhead);
        }
}

