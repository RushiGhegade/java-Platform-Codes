/*
Code1:Linked List Cycle
Companies:
Google,Facebook,Flipkart,Bloomberg,Samsung,Netflix,Microsoft,Walmart,CRED,Meesho,Swigg
y,Dream11,InMobi,Oyo,PayTM,Byju's
Platform: Leetcode - 141, GFG
Striverâ€™s DSA sheet.
Description:
Given head, the head of a linked list, determines if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again
by continuously following the next pointer. Internally, pos is used to denote the index of
the node that tail's next pointer is connected to. Note that pos is not passed as a
parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.
Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node
(0-indexed).
Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
Constraints:
The number of the nodes in the list is in the range [0, 104].

-10^5 <= Node.val <= 10^5
pos is -1 or a valid index in the linked-list.

*/


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 // pos means that last node is connect to pos node we find there is  cycle or not in linkedlist.
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        ListNode slow=head;
        ListNode fast=head;

        while(fast!=null) {
            // incress slow +1
            slow=slow.next;

            // incress fast +2
            fast=fast.next;
            if(fast!=null) {
                // return false;
                 fast=fast.next;
                
            }else{
                return false;
            }

            if(fast==slow){
                return true;
            }

        }

        return false;
 

        // BruteForce Approch
        /*HashMap hm=new HashMap();

        ListNode temp=head;

        while(temp!=null) {

            if(hm.containsKey(temp)){
                return true;
            }else{
                hm.put(temp,0);
            }
            temp=temp.next;

        }
        return false;*/


    }
}

