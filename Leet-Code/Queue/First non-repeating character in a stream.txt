/*
:First non-repeating character in a stream
Companies : Flipkart, Amazon, Microsoft, FactSet, Payu, Adobe, Yahoo
Platform : GFG
Description :
Given an input stream A of n characters consisting only of lower case alphabets. While
reading characters from the stream, you have to tell which character has appeared only
once in the stream upto that point. If there are many characters that have appeared only
once, you have to tell which one of them was the first one to appear. If there is no such
character then append '#' to the answer.
NOTE:
1. You need to find the answer for every i (0 <= i < n)
2. In order to find the solution for every i you need to consider the string from starting
position till ith position.
Example 1:
Input: A = "aabc"
Output: "a#bb"
Explanation: For every ith character we will
consider the string from index 0 till index i first non
repeating character is as follow-
"a" - first non-repeating character is 'a'
"aa" - no non-repeating character so '#'
"aab" - first non-repeating character is 'b'
"aabc" - there are two non repeating characters 'b' and 'c',
first non-repeating character is 'b' because 'b' comes before
'c' in the stream.
Example 2:
Input: A = "zz"
Output: "z#"
Explanation: For every character first non
repeating character is as follow-
"z" - first non-repeating character is 'z'
"zz" - no non-repeating character so '#'

Your Task:
You don't need to read or print anything. Your task is to complete the function
FirstNonRepeating() which takes A as input parameter and returns a string after
processing the input stream.

Expected Time Complexity: O(n)
Expected Space Complexity: O(n)

Constraints:
1 <= n <= 105
*/

//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String A = br.readLine().trim();
            Solution ob = new Solution();
            String ans = ob.FirstNonRepeating(A);
            out.println(ans);
        }
        out.close();
    }
}

// } Driver Code Ends

// import java.util.*;
class Solution
{
    public String FirstNonRepeating(String A)
    {
        // code here
        Queue<Character> q=new LinkedList<>();
        
        int arr[]=new int[26];
        StringBuilder str=new StringBuilder();
        // String str=""; // it give tle
        for(int i=0;i<A.length();i++) {
            
            char ch=A.charAt(i);
            
            q.add(ch);
            
            int index =(int) ch-'a';
            arr[index]=arr[index]+1;
                    
            while(!q.isEmpty()&&arr[(int)q.peek()-'a']>1){
                q.poll();
            }
            if(q.isEmpty()){
                str=str.append("#");
                // str=str+"#";
            }else{
                str=str.append((char)q.peek());
                // str=str+(char)q.peek();
            }
        }
        return str.toString();
    }
}