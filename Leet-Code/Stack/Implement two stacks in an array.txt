/*
2:Implement two stacks in an array
Companies: Microsoft, Visa, Accenture, Infosys
Platform : GFG
Description:
Your task is to implement 2 stacks in one array efficiently. You need to implement 4
methods.
twoStacks: Initialize the data structures and variables to implement 2 stacks in one
array.
push1 : pushes element into first stack.
push2 : pushes element into second stack.
pop1 : pops an element from first stack and returns the popped element. If first stack is
empty, it should return -1.
pop2 : pops an element from second stack and returns the popped element. If second
stack is empty, it should return -1.
Example 1:
Input:
push1(2)
push1(3)
push2(4)
pop1()
pop2()
pop2()
Output:
3 4 -1
Explanation:
push1(2) the stack1 will be {2}
push1(3) the stack1 will be {2,3}
push2(4) the stack2 will be {4}
pop1() the popped element will be 3 from stack1 and stack1 will be {2}

pop2() the popped element will be 4 from stack2 and now stack2 is empty
pop2() the stack2 is now empty and hence returned -1.
Example 2:
Input:
push1(1)
push2(2)
pop1()
push1(3)
pop1()
pop1()
Output:
1 3 -1
Explanation:
push1(1) the stack1 will be {1}
push2(2) the stack2 will be {2}
pop1() the popped element will be 1 from stack1 and stack1 will be empty
push1(3) the stack1 will be {3}
pop1() the popped element will be 3 from stack1 and stack1 will be empty
pop1() the stack1 is now empty and hence returned -1.
Expected Time Complexity: O(1) for all the four methods.
Expected Auxiliary Space: O(1) for all the four methods.
Constraints:
1 <= Number of queries <= 104
1 <= Number of elements in the stack <= 100
The sum of the count of elements in both the stacks < size of the given array
*/

//{ Driver Code Starts
import java.util.*;

class TwoStack
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in); 
		int T = sc.nextInt();
		while(T>0)
		{
			twoStacks g = new twoStacks();
			int Q = sc.nextInt();
			while(Q>0)
			{
				int stack_no = sc.nextInt();
				int QueryType = sc.nextInt();
				
				
				if(QueryType == 1)
				{
					int a = sc.nextInt();
					if(stack_no == 1)
					 g.push1(a);
					else if(stack_no ==2)
					 g.push2(a);
				}else if(QueryType == 2)
				{
					if(stack_no==1)
					System.out.print(g.pop1()+" ");
					else if(stack_no==2)
					System.out.print(g.pop2()+" ");
				}
			
				Q--;
			}
				System.out.println();
		  T--;
		}
	}
}


// } Driver Code Ends



class twoStacks
{
    ArrayList al;
    
    Stack s1;
    Stack s2;
    
    twoStacks()
    {
        s1=new Stack();
        s2=new Stack();
        al=new ArrayList();
    }
    //Function to push an integer into the stack1.
    void push1(int x)
    {
        s1.push(x);
    }
    //Function to push an integer into the stack2.
    void push2(int x)
    {
        s2.push(x);  
    }
    //Function to remove an element from top of the stack1.
    int pop1()
    {
        int x=-1;
        if(!s1.empty()){
            // al.add(s1.peek());
            x=(int)s1.peek();   
            s1.pop();
        }
        return x;
    }
    //Function to remove an element from top of the stack2.
    int pop2()
    {
        int x=-1;
        if(!s2.empty()){
            // al.add(s2.peek());
            x=(int)s2.peek();
            s2.pop();
        }else{
            al.add(-1);
        }
        return x;
    }
}

