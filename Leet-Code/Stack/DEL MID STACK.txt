/*
Delete middle element of a stack
Companies: Amazon
Platform : GFG
Description:
Given a stack, delete the middle element of the stack without using any additional data
structure.
Middle element:- floor((size_of_stack+1)/2) (1-based indexing) from bottom of the stack.
Note: The output shown by the compiler is the stack from top to bottom.
Example 1:

Input:
Stack = {10, 20, 30, 40, 50}
Output:
ModifiedStack = {10, 20, 40, 50}
Explanation:
If you print the stack the bottom-most element will be 10 and the top-most
element will be 50. Middle element will be element at index 3 from bottom, which
is 30. Deleting 30, stack will look like {10 20 40 50}.

Example 2:
Input:
Stack = {10 20 30 40}
Output:
ModifiedStack = {10 30 40}
Explanation:

If you print the stack the bottom-most element will be 10 and the top-most
element will be 40. Middle element will be element at index 2 from bottom, which
is 20. Deleting 20, stack will look like {10 30 40}.

Your Task:
You don't need to read input or print anything. Complete the function deleteMid() which
takes the stack and its size as input parameters and modifies the stack in-place.
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)
Constraints:
2 ≤ size of stack ≤ 105
*/




class Solution
{
    
    void delMid(Stack s,int size,int curr){
        
        if(curr==(size/2)+1) {
            s.pop();


            return;
        }
        
        int top=(int)s.peek();
        s.pop();
        delMid(s,size,curr+1);
        s.push(top);
        
    }
    
    //Function to delete middle element of a stack.
    public void deleteMid(Stack<Integer>s,int sizeOfStack){
        // code here
        
        // Brute force
        /*Stack s1=new Stack();
        
        int mid=((sizeOfStack)/2);
       
        
        for(int i=1;i<=mid;i++) {
           
            s1.push(s.peek());
            
            s.pop();
        }
        s.pop();
        while(!s1.empty()){
            s.push((int)s1.pop());
        }*/
        
        // optimize approch
        delMid(s,sizeOfStack,1);
        
    } 
}